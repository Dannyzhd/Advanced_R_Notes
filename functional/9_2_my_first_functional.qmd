---
title: "9_2_my_first_functional"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 4

editor: visual
---

```{r}
library(purrr)
```

# 9.2.1 purrr::map()

[`purrr::map()`](https://purrr.tidyverse.org/reference/map.html)^53^ takes a vector and a function, **calls the function once for each element** of the vector, and returns the results as a **list**. In other words, [`map(1:3, f)`](https://purrr.tidyverse.org/reference/map.html) is equivalent to [`list(f(1), f(2), f(3))`](https://rdrr.io/r/base/list.html).

```{r}
squaring <- function(x) x^2

map(.x = 1:3, 
    .f = squaring)
```

the name map here refers to idea of **mapping** from mathematics, `.f` provides the mapping here.

![](images/map.png)

the idea is as simple as

```{r}
simple_map <- function(x, f, ...) {
  out <- vector("list", length(x))
  for (i in seq_along(x)) {
    out[[i]] <- f(x[[i]], ...)
  }
  out
}
```

The real [`purrr::map()`](https://purrr.tidyverse.org/reference/map.html) function has a few differences: it is written in C

1.  faster!
2.  supports a few shortcuts(see 9.2.2)

-   ::: callout-note
    [`map()`](https://purrr.tidyverse.org/reference/map.html) is basically equivalent to [`lapply()`](https://rdrr.io/r/base/lapply.html)`with a few more helpers.`
    :::

### producing atomic vector

[`map()`](https://purrr.tidyverse.org/reference/map.html) returns a list

to return atomic vector we have:

```{r}
# map_chr() always returns a character vector
map_chr(mtcars, typeof)
# map_lgl() always returns a logical vector
map_lgl(iris, is.double)

# map_int() always returns a integer vector
n_unique <- function(x) length(unique(x))
map_int(mtcars, n_unique)


# map_dbl() always returns a double vector!
map_dbl(mtcars, mean)
```

notice `mtcars` is a data frame, and data frames are lists containing vectors of the same length.

![](images/map-list.png)

#### porperty:

All map-variant functions always return an **output vector the same length as the input**

Thus each call of `.f` needs to return a single value.

```{r}
#| eval: false
pair <- function(x) c(x, x)
map_dbl(1:3, pair)
#> ! Result must be length 1, not 2.
```

Similarly, the type of return must be correct.

```{r}
#| eval: false

map_dbl(1:2, as.character)
#> Error: Can't coerce element 1 from a character to a double
```

map_dbl will die trying to coerce the output to a length-1 double.

In either case, it's often useful to switch back to [`map()`](https://purrr.tidyverse.org/reference/map.html), because [`map()`](https://purrr.tidyverse.org/reference/map.html) can accept any type of output. That allows you to see the problematic output, and figure out what to do with it.

#### equivalence in BASE R

`sapply()` and `vapply()` can also returns atomic vector

1.  `sapply()` :

    avoid to use as it tries to simplify result, potentially returning matrix, list or vector.

2.  `vapply()` :

    works but not succinct. for example:the equivalent to [`map_dbl(x, mean, na.rm = TRUE)`](https://purrr.tidyverse.org/reference/map.html) is [`vapply(x, mean, na.rm = TRUE, FUN.VALUE = double(1))`](https://rdrr.io/r/base/lapply.html).

# 9.2.2 **Anonymous functions and shortcuts**

### Anonymous Function

Instead of using [`map()`](https://purrr.tidyverse.org/reference/map.html) with an existing function, we can create an inline anonymous function

```{r}
map_dbl(mtcars, function(x) (3 * sum(x))^2 ) 
```

### Shortcut

Simply use the twiddle \~

**twiddle always comes together with .x**

Following the twiddle, we can supply function with name or without name!

In either case .x is referred to as the current element in the list we are calling f for.

```{r}

map_dbl(mtcars, ~ (3 * sum(.x))^2 )

```

purrr functions translate formulas, created by [`~`](https://rdrr.io/r/base/tilde.html) (pronounced "twiddle"), into functions.

We can see this process by [`as_mapper()`](https://purrr.tidyverse.org/reference/as_mapper.html):

```{r}
as_mapper(~ (3 * sum(.x))^2 )
```

`.x` and `.y` for two argument functions, and `..1`, `..2`, `..3`, etc, for functions with an arbitrary number of arguments.

shortcut is useful for generating random data.

```{r}
x <- map(1:3, ~ runif(2))
str(x)

```

### indexing

powered by [`purrr::pluck()`](https://purrr.tidyverse.org/reference/pluck.html) , map() families can be used for indexing too.

-   character vector to select elements by name,

-   an integer vector to select by position

-   a list to select by both name and position (useful for nested lists!)

```{r}
x <- list(
  list(-1, x = 1, y = c(2), z = "a"),
  list(-2, x = 4, y = c(5, 6), z = "b"),
  list(-3, x = 8, y = c(9, 10, 11))
)

# Select by name
# for each element in x, index by name "x"
map_dbl(x, "x")


# Or by position
# for each element in x, index the first element
map_dbl(x, 1)

# Or by both
# for each element in x, index by name "y", and then index the first element.
map_dbl(x, list("y", 1))
```

***Don't confuse:***

Notice: default of non-existing indexing is NULL. See `?pluck.` so although `map(x, "z")` , map(x, "z") is not as NULL cannot be coerced into character. Unless we provide a default.

```{r eval=FALSE}
# You'll get an error if a component doesn't exist:
map_chr(x, "z")
#> Error: Result 3 must be a single string, not NULL of length 0
```

```{r}
# Unless you supply a .default value
map_chr(x, "z", .default = NA)
```

```{r}
# or simply use map()
map(x, "z")
```

-   lapply() accepts function as string input or symbol input. e.g lapply(1:3, squaring) is equivalent to lapply(1:3, "squaring")

# 9.2.3 Passing additional arguments

In other words, passing arguments with `…`

### Additional arguments

for e.g. we can supply `na.rm = T` to `mean()`

### method 1: passing inside anonymous function

```{r}
x <- list(1:5, c(NA, NA, 2, 10))

# We can do it this way.
# quick review: map() returns a list
map(x, ~mean(.x, na.rm = T))

# quick review: map_dbl() returns an atomic vec
map_dbl(x, ~mean(.x, na.rm = T))


```

### method 2: simpler way: direct passing after f

```{r}
map(x, mean, na.rm = T)
map_dbl(x, mean, na.rm = T)

```

***Don't confuse:***

Don't write it using both twiddle and additional argument(s), the later will be ignored!!

Don't pass the argument after anonymous function. It won't work.

```{r}
map(x, ~mean(.x), na.rm = T)
```

### Properties:

-   Any arguments after f in the map() call are inserted after the individual element in each f() call

    ![](images/map-arg.png)

-   `map()` is only vectorised over its [first argument]{.underline}, If an argument after `f` is a vector, it will be passed along as is:

    ![](images/map-arg-recycle.png)

### Difference b.w method 1 2

**method1**: the extra argument(s) is evaluated **for every f call**

method2: the extra argument(s) is evaluated **only once at map() call.**

```{r}
my_func <- function(a, b) a + b
x <- rep(0, 5)

# evaluated for every f call
map_dbl(x, ~my_func(.x, runif(n = 1)) )


# evaluated only once!
map_dbl(x, my_func, runif(n = 1))


```

# 9.2.4 Argument names

### Tip: always pass argument with names

This is good for reading. Otherwise the user needs to remember the order of the argument for the function.

### Why map() uses .x and .f

map() uses weird .x and .f to avoid the situation where the function provided to map() uses x or f.

for example, recall our simple_map which uses f to as argument name for the function.

```{r}
simple_map <- function(x, f, ...) {
  out <- vector("list", length(x))
  for (i in seq_along(x)) {
    out[[i]] <- f(x[[i]], ...)
  }
  out
}
```

But then if our function also uses f as one of its argument name.

Our `map_dbl()` would work! :D.

As it know the `f` is not the function argument, instead it is the argument to supply into `.f = my_func` .

```{r}
my_func <- function(a, f){a + f}

map_dbl(1:3, my_func, f = 10)

```

But simple_map would seize the `f` , wrongly recognizing it as the function to iterate over 1:3.

```{r}
#| eval: false
simple_map(1:3, my_func, f = 10)
#> Error in f(x[[i]], ...) : could not find function "f"

```

Recognize `simple_map(1:3, my_func, f = 10)` is equivalent to `simple_map(x = 1:3, f = 10, my_func)`

To make it harder to debug, in a case where the provided function itself also uses f as a function, then the error might be hard to fathom.

```{r}
#| eval: false


# f is supposed to be a function here!
bootstrap_summary <- function(x, f) {
  f(sample(x, replace = TRUE))
}


# f is seized by simple_map()  ):
simple_map(mtcars, bootstrap_summary, f = mean)
#> Error in mean.default(x[[i]], ...): 'trim' must be numeric of length one

```

This is essentailly calling simple_map(x = mtcars, f = mean, trim = bootstrap), resulting in the error.

### Takeaways

-   .x and .f naming is to avoid conflict in cases where the .f function itself has argument named x or f

-   Just in case if .x and .f are also conflicted, use anonymous function instead.

-   Explicitly provide the name when passing argument.

### Compare with apply() family

Base functions that pass along `...` use a variety of naming conventions to prevent undesired argument matching:

-   The apply family mostly uses capital letters (e.g. `X` and `FUN`).

### What is `…`

`…` is essentially the arguments passed into an argument of the current function.

e.g.

`map(.x, .f, ..., .progress = FALSE)`

`apply(X, MARGIN, FUN, ..., simplify = TRUE)`
