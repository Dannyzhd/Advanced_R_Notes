---
title: "9.6 Predicate functionals"
format: html
editor: visual
---

# **9.6 Predicate functionals**

predicate

:   a function that returns a single TRUE or FALSE

we say a predicate **matches** a vector if it takes in the vector and returns `TRUE`

[`is.character()`](https://rdrr.io/r/base/character.html), [`is.null()`](https://rdrr.io/r/base/NULL.html), or [`all()`](https://rdrr.io/r/base/all.html)

## **9.6.1 Basics**

predicate functrional

:   a function applying a predicate to each element of a vector.

7 useful examples in purrr:

-   [`some(.x, .p)`](https://purrr.tidyverse.org/reference/every.html) returns `TRUE` if *any* element matches;

-   [`every(.x, .p)`](https://purrr.tidyverse.org/reference/every.html) returns `TRUE` if *all* elements match;

-   [`none(.x, .p)`](https://purrr.tidyverse.org/reference/every.html) returns `TRUE` if *no* element matches.

These are similar to [`any(map_lgl(.x, .p))`](https://rdrr.io/r/base/any.html), [`all(map_lgl(.x, .p))`](https://rdrr.io/r/base/all.html) and [`all(map_lgl(.x, negate(.p)))`](https://rdrr.io/r/base/all.html) but they terminate early: [`some()`](https://purrr.tidyverse.org/reference/every.html) returns `TRUE` when it sees the first `TRUE`, and [`every()`](https://purrr.tidyverse.org/reference/every.html) and [`none()`](https://purrr.tidyverse.org/reference/every.html) return `FALSE` when they see the first `FALSE` or `TRUE` respectively.

-   [`detect(.x, .p)`](https://purrr.tidyverse.org/reference/detect.html) returns the *value* of the first match;

-   [`detect_index(.x, .p)`](https://purrr.tidyverse.org/reference/detect.html) returns the *location* of the first match.

-   [`keep(.x, .p)`](https://purrr.tidyverse.org/reference/keep.html) *keeps* all matching elements;

-   [`discard(.x, .p)`](https://purrr.tidyverse.org/reference/keep.html) *drops* all matching elements.

Example

```{r}
library(pacman)
p_load(palmerpenguins, tidyverse)

# let's say we want all factor columns 
keep(penguins, is.factor)

# Say we want to find all columns with na values
discard(penguins, ~sum(is.na(.x)) == 0)
```

## 9.6.2 Map variants

### map_if

The functions `map_if()` and `map_at()` take `.x` as input, apply the function `.f` to some of the elements of `.x`, and return a list of the same length as the input.

Note!!! even for the elements in the .x that map_if did not call .f upon, they still stay in the returned list!.

```{r eval=FALSE}
# Say if we want mean of every numeric column of penguins,
# this might not be a good idea
map_if(.x = penguins, .p = is.numeric, .f = mean, na.rm = T)
```

```{r}
# we better take one step further
map_if(.x = penguins, .p = is.numeric, .f = mean, na.rm = T) %>% keep(is.numeric)
```

```{r}
df <- data.frame(
  num1 = c(0, 10, 20),
  num2 = c(5, 6, 7),
  chr1 = c("a", "b", "c"),
  stringsAsFactors = FALSE
)

str(map_if(df, is.numeric, mean))
#> List of 3
#>  $ num1: num 10
#>  $ num2: num 6
#>  $ chr1: chr [1:3] "a" "b" "c"
str(modify_if(df, is.numeric, mean))
#> 'data.frame':    3 obs. of  3 variables:
#>  $ num1: num  10 10 10
#>  $ num2: num  6 6 6
#>  $ chr1: chr  "a" "b" "c"
str(map(keep(df, is.numeric), mean))
#> List of 2
#>  $ num1: num 10
#>  $ num2: num 6
```

## 9.6.3 Exercises

1.  Why isn't [`is.na()`](https://rdrr.io/r/base/NA.html) a predicate function? What base R function is closest to being a predicate version of [`is.na()`](https://rdrr.io/r/base/NA.html)?

By def, a predicate returns a [**single**]{.underline} logical value. **`is.na()`**, on the other hand, returns a logical vector the same length as the input.

```{r}
is.na(rep(NA, 10))
```

The closest one can be `anyNA`

```{r}
map_lgl(penguins, anyNA)

# find all guys with NA value.
keep(penguins, anyNA)
```

2.  `simple_reduce()` has a problem when `x` is length 0 or length 1. Describe the source of the problem and how you might go about fixing it.

```{r}
simple_reduce <- function(x, f) {
  out <- x[[1]]
  for (i in seq(2, length(x))) {
    out <- f(out, x[[i]])
  }
  out
}
```

Daniel: when length of x is 1, the seq(2, length(x)) is seq(2, 1) which would be c(2, 1) as seq can go both up and down.

thus the for loop would start at index 2, f(out, x\[\[2\]\]), which would lead of "subscript out of bounds" error.

Similar situation when length of x is 0.

We can avoid this by taking into consideration the situations where length of x is 1 or zero.

```{r}
simple_reduce1 <- function(x, f, default) {
  if(length(x) == 0) return(default)
  if(length(x) == 1) return(x)
  
  out <- x[[1]]
  for (i in seq(2, length(x))) {
    out <- f(out, x[[i]])
  }
  out
}
```

Now it is working as expected.

```{r}
simple_reduce1(integer(0), f = mean, default = 100)

simple_reduce1(1, f = mean, default = 100)
```
